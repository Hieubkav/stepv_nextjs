from pathlib import Path
import re

root = Path(__file__).resolve().parent.parent
path = root / "apps/web/src/components/sections/HeroSection.tsx"
text = path.read_text(encoding='utf-8')

new_interface = "interface HeroCta {\n  label: string;\n  url: string;\n  style?: 'primary' | 'secondary';\n}\n\ninterface HeroSectionProps {\n  titleLines?: string[];\n  subtitle?: string;\n  brandLogos?: BrandLogo[];\n  videoUrl?: string;\n  posterUrl?: string;\n  ctas?: HeroCta[];\n}\n\n"
text = re.sub(r"interface HeroSectionProps \{[\s\S]*?\}\s*\n", new_interface, text)

new_destructure = "const HeroSection = ({\n  titleLines = ['T?O RA.', 'THU HUT.', 'CHUY?N D?I.'],\n  subtitle = 'CHUYEN GIA HINH ?NH 3D CHO THUONG HI?U NU?C HOA & LAM D?P',\n  brandLogos = [\n    { url: '/images/brands/brand-1.png', alt: 'Brand 1' },\n    { url: '/images/brands/brand-2.png', alt: 'Brand 2' },\n    { url: '/images/brands/brand-3.png', alt: 'Brand 3' },\n    { url: '/images/brands/brand-4.png', alt: 'Brand 4' },\n    { url: '/images/brands/brand-5.png', alt: 'Brand 5' },\n    { url: '/images/brands/brand-6.png', alt: 'Brand 6' },\n    { url: '/images/brands/brand-7.png', alt: 'Brand 7' },\n    { url: '/images/brands/brand-8.png', alt: 'Brand 8' },\n    { url: '/images/brands/brand-9.png', alt: 'Brand 9' },\n    { url: '/images/brands/brand-10.png', alt: 'Brand 10' },\n    { url: '/images/brands/brand-11.png', alt: 'Brand 11' },\n    { url: '/images/brands/brand-12.png', alt: 'Brand 12' },\n    { url: '/images/brands/brand-13.png', alt: 'Brand 13' },\n    { url: '/images/brands/brand-14.png', alt: 'Brand 14' },\n    { url: '/images/brands/brand-15.png', alt: 'Brand 15' },\n    { url: '/images/brands/brand-16.png', alt: 'Brand 16' },\n    { url: '/images/brands/brand-17.png', alt: 'Brand 17' },\n    { url: '/images/brands/brand-18.png', alt: 'Brand 18' },\n    { url: '/images/brands/brand-19.png', alt: 'Brand 19' },\n  ],\n  videoUrl = '/hero-glass-video.mp4',\n  posterUrl = '/hero-glass.jpg',\n  ctas = [\n    { label: 'XEM THEM', url: '#services', style: 'secondary' },\n    { label: 'DAT LICH TU VAN MIEN PHI', url: '#contact', style: 'primary' },\n  ],\n}: HeroSectionProps) => {"
text = re.sub(r"const HeroSection = \(\{[\s\S]*?\n\}: HeroSectionProps\) => \{", new_destructure, text)

new_effect = "useEffect(() => {\n    const img = new window.Image();\n    img.src = posterUrl;\n    img.onload = () => setIsPosterLoaded(true);\n\n    if (!videoUrl) {\n      setVideoError(true);\n      setIsVideoLoaded(true);\n      setShowVideo(false);\n      return;\n    }\n\n    const isMobile = window.innerWidth <= 768;\n    const connection = (navigator as { connection?: { effectiveType?: string } }).connection;\n    const isSlowConnection = connection?.effectiveType === 'slow-2g' || connection?.effectiveType === '2g';\n\n    if (isMobile || isSlowConnection) {\n      console.log('Mobile/slow connection detected, using poster image only');\n      setIsMobileDisabled(true);\n      setVideoError(true);\n      setIsVideoLoaded(true);\n      return;\n    }\n\n    const timer = window.setTimeout(() => {\n      setShowVideo(true);\n    }, 1500);\n\n    return () => window.clearTimeout(timer);\n  }, [posterUrl, videoUrl]);"
text = re.sub(r"useEffect\(\(\) => \{\s*// Preload poster image[\s\S]*?\}, \[\]\);", new_effect, text)

old_handles = "const handleViewMore = () => {\n    const element = document.querySelector('#services');\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  const handleBookConsultation = () => {\n    const element = document.querySelector('#contact');\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n"
new_handle = "const handleNavigate = (targetUrl: string) => {\n    if (!targetUrl) return;\n    if (targetUrl.startsWith('#')) {\n      const element = document.querySelector(targetUrl);\n      if (element) {\n        element.scrollIntoView({ behavior: 'smooth' });\n      }\n      return;\n    }\n    if (targetUrl.startsWith('http')) {\n      window.open(targetUrl, '_blank', 'noopener,noreferrer');\n      return;\n    }\n    window.location.href = targetUrl;\n  };\n"
text = text.replace(old_handles, new_handle)

cta_pattern = r"<div className=\"flex flex-col sm:flex-row[\s\S]*?</div>\n          </div>"
cta_replacement = "<div className=\"flex flex-col sm:flex-row gap-3 md:gap-4 justify-center items-center mb-6 md:mb-8\">\n            {ctas.map((cta, index) => {\n              const variant = cta.style ?? (index === 0 ? 'secondary' : 'primary');\n              const isPrimary = variant === 'primary';\n              const baseClass = isPrimary\n                ? 'group flex items-center gap-2 px-6 md:px-8 py-3 md:py-4 bg-yellow-600 hover:bg-yellow-500 rounded-full text-white font-medium uppercase tracking-wide transition-all duration-300 hover:scale-105 shadow-xl hover:shadow-yellow-500/25 text-sm md:text-base w-full sm:w-auto max-w-xs'\n                : 'group flex items-center gap-2 px-6 md:px-8 py-3 md:py-4 bg-white/20 backdrop-blur-md border border-white/40 rounded-full text-white font-medium uppercase tracking-wide transition-all duration-300 hover:bg-white hover:text-black hover:scale-105 text-sm md:text-base w-full sm:w-auto max-w-xs shadow-lg';\n\n              return (\n                <button\n                  key={`${cta.label}-${index}`}\n                  onClick={() => handleNavigate(cta.url)}\n                  className={baseClass}\n                >\n                  <svg className=\"w-4 h-4 transition-transform duration-300 group-hover:translate-x-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                  </svg>\n                  <span className=\"text-center\">{cta.label}</span>\n                </button>\n              );\n            })}\n          </div>\n        </div>"
text = re.sub(cta_pattern, cta_replacement, text)

text = text.replace("img.src = '/hero-glass.jpg';", "img.src = posterUrl;")
text = text.replace("style={{ backgroundImage: 'url(/hero-glass.jpg)' }}", "style={{ backgroundImage: `url(${posterUrl})` }}")
text = text.replace("<source src=\"/hero-glass-video.mp4\" type=\"video/mp4\" />", "<source src={videoUrl} type=\"video/mp4\" />")
text = text.replace("{showVideo && !videoError && (", "{showVideo && !videoError && videoUrl && (")
text = text.replace("brands.map", "brandLogos.map")

path.write_text(text, encoding='utf-8')

